syntax = "proto2";

//top pack other pack in "payload"
//"cmd" is used to select pid
message UserProWrapper
{
    required int32 cmd = 1;
    optional int32 status = 2 [default = 0];
    optional int32 reqid = 3 [default = 0];
    optional bytes payload = 4;
}

//PID: 64
message CommonSensorRequest
{
    //This message has no payload
}

//PID: 65
message CommonSensorResponse
{
    //chs:2; unit:0.001째C
    repeated int32 temperature = 1;
    //chs:2; unit:0.001%
    repeated int32 humidity = 2;
    //chs:1;
    repeated bool is_open_door = 3;
    //chs:1;
    repeated bool is_vibrate = 4;
    //chs:2; unit:(0~255)
    repeated int32 luminance = 5;
    //chs:6; unit:1mv
    repeated int32 power_voltage = 6;
}

//PID: 66
message AdvancedSensorRequest
{
    //This message has no payload
}

//PID: 67
message AdvancedSensorResponse
{
    //chs:1; unit:ppm
    repeated int32 smog = 1;
    //chs:1; unit:1째C
    repeated int32 level_angle_x = 2;
    //chs:1; unit:1째C
    repeated int32 level_angle_y = 3;
    //chs:1; unit:1째C
    repeated int32 level_angle_z = 4;
    //chs:2;
    repeated int32 diff_pressure = 5;
}

//PID: 68
message FanStatusRequest
{
    //This message has no payload
}

//PID: 69
message FanStatusResponse
{
    //chs:16; unit:rpm
    repeated int32 fan_speed = 1;
}

//PID: 70
message FanControlRequest
{
    //chs:4; unit:(0~63)
    repeated int32 dri_pwm = 1;
}

//PID: 71
message FanControlResponse
{
    optional bool result = 1 [default = true];
}

//PID: 72
message RelayControlRequest
{
    //chs:4;
    repeated bool is_open = 1;
}

//PID: 73
message RelayControlResponse
{
    optional bool result = 1 [default = true];
}

//PID: 74
message LuminanceControlRequest
{
    //chs:4; unit:(0~63)
    repeated int32 luminance = 1;
}

//PID: 75
message LuminanceControlResponse
{
    optional bool result = 1 [default = true];
}